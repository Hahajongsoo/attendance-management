// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "attendance-management/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ClassRepository is an autogenerated mock type for the ClassRepository type
type ClassRepository struct {
	mock.Mock
}

type ClassRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ClassRepository) EXPECT() *ClassRepository_Expecter {
	return &ClassRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *ClassRepository) Create(_a0 *models.Class) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Class) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClassRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClassRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *models.Class
func (_e *ClassRepository_Expecter) Create(_a0 interface{}) *ClassRepository_Create_Call {
	return &ClassRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *ClassRepository_Create_Call) Run(run func(_a0 *models.Class)) *ClassRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *ClassRepository_Create_Call) Return(_a0 error) *ClassRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClassRepository_Create_Call) RunAndReturn(run func(*models.Class) error) *ClassRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: classID
func (_m *ClassRepository) Delete(classID string) (int64, error) {
	ret := _m.Called(classID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(classID)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ClassRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - classID string
func (_e *ClassRepository_Expecter) Delete(classID interface{}) *ClassRepository_Delete_Call {
	return &ClassRepository_Delete_Call{Call: _e.mock.On("Delete", classID)}
}

func (_c *ClassRepository_Delete_Call) Run(run func(classID string)) *ClassRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClassRepository_Delete_Call) Return(_a0 int64, _a1 error) *ClassRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_Delete_Call) RunAndReturn(run func(string) (int64, error)) *ClassRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *ClassRepository) GetAll() ([]models.Class, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Class, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Class); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ClassRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ClassRepository_Expecter) GetAll() *ClassRepository_GetAll_Call {
	return &ClassRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ClassRepository_GetAll_Call) Run(run func()) *ClassRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClassRepository_GetAll_Call) Return(_a0 []models.Class, _a1 error) *ClassRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_GetAll_Call) RunAndReturn(run func() ([]models.Class, error)) *ClassRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: classID
func (_m *ClassRepository) GetByID(classID string) (*models.Class, error) {
	ret := _m.Called(classID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Class, error)); ok {
		return rf(classID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Class); ok {
		r0 = rf(classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ClassRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - classID string
func (_e *ClassRepository_Expecter) GetByID(classID interface{}) *ClassRepository_GetByID_Call {
	return &ClassRepository_GetByID_Call{Call: _e.mock.On("GetByID", classID)}
}

func (_c *ClassRepository_GetByID_Call) Run(run func(classID string)) *ClassRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClassRepository_GetByID_Call) Return(_a0 *models.Class, _a1 error) *ClassRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_GetByID_Call) RunAndReturn(run func(string) (*models.Class, error)) *ClassRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTeacherID provides a mock function with given fields: teacherID
func (_m *ClassRepository) GetByTeacherID(teacherID string) ([]models.Class, error) {
	ret := _m.Called(teacherID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTeacherID")
	}

	var r0 []models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Class, error)); ok {
		return rf(teacherID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Class); ok {
		r0 = rf(teacherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(teacherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_GetByTeacherID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTeacherID'
type ClassRepository_GetByTeacherID_Call struct {
	*mock.Call
}

// GetByTeacherID is a helper method to define mock.On call
//   - teacherID string
func (_e *ClassRepository_Expecter) GetByTeacherID(teacherID interface{}) *ClassRepository_GetByTeacherID_Call {
	return &ClassRepository_GetByTeacherID_Call{Call: _e.mock.On("GetByTeacherID", teacherID)}
}

func (_c *ClassRepository_GetByTeacherID_Call) Run(run func(teacherID string)) *ClassRepository_GetByTeacherID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClassRepository_GetByTeacherID_Call) Return(_a0 []models.Class, _a1 error) *ClassRepository_GetByTeacherID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_GetByTeacherID_Call) RunAndReturn(run func(string) ([]models.Class, error)) *ClassRepository_GetByTeacherID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClassesForStudentByWeekday provides a mock function with given fields: studentID, weekday
func (_m *ClassRepository) GetClassesForStudentByWeekday(studentID int, weekday string) ([]models.Class, error) {
	ret := _m.Called(studentID, weekday)

	if len(ret) == 0 {
		panic("no return value specified for GetClassesForStudentByWeekday")
	}

	var r0 []models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]models.Class, error)); ok {
		return rf(studentID, weekday)
	}
	if rf, ok := ret.Get(0).(func(int, string) []models.Class); ok {
		r0 = rf(studentID, weekday)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(studentID, weekday)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_GetClassesForStudentByWeekday_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClassesForStudentByWeekday'
type ClassRepository_GetClassesForStudentByWeekday_Call struct {
	*mock.Call
}

// GetClassesForStudentByWeekday is a helper method to define mock.On call
//   - studentID int
//   - weekday string
func (_e *ClassRepository_Expecter) GetClassesForStudentByWeekday(studentID interface{}, weekday interface{}) *ClassRepository_GetClassesForStudentByWeekday_Call {
	return &ClassRepository_GetClassesForStudentByWeekday_Call{Call: _e.mock.On("GetClassesForStudentByWeekday", studentID, weekday)}
}

func (_c *ClassRepository_GetClassesForStudentByWeekday_Call) Run(run func(studentID int, weekday string)) *ClassRepository_GetClassesForStudentByWeekday_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *ClassRepository_GetClassesForStudentByWeekday_Call) Return(_a0 []models.Class, _a1 error) *ClassRepository_GetClassesForStudentByWeekday_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_GetClassesForStudentByWeekday_Call) RunAndReturn(run func(int, string) ([]models.Class, error)) *ClassRepository_GetClassesForStudentByWeekday_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: classID, class
func (_m *ClassRepository) Update(classID string, class *models.Class) (int64, error) {
	ret := _m.Called(classID, class)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.Class) (int64, error)); ok {
		return rf(classID, class)
	}
	if rf, ok := ret.Get(0).(func(string, *models.Class) int64); ok {
		r0 = rf(classID, class)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, *models.Class) error); ok {
		r1 = rf(classID, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClassRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ClassRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - classID string
//   - class *models.Class
func (_e *ClassRepository_Expecter) Update(classID interface{}, class interface{}) *ClassRepository_Update_Call {
	return &ClassRepository_Update_Call{Call: _e.mock.On("Update", classID, class)}
}

func (_c *ClassRepository_Update_Call) Run(run func(classID string, class *models.Class)) *ClassRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Class))
	})
	return _c
}

func (_c *ClassRepository_Update_Call) Return(_a0 int64, _a1 error) *ClassRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClassRepository_Update_Call) RunAndReturn(run func(string, *models.Class) (int64, error)) *ClassRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewClassRepository creates a new instance of ClassRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClassRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClassRepository {
	mock := &ClassRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
