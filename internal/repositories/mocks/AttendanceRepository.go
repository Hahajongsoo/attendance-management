// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "attendance-management/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AttendanceRepository is an autogenerated mock type for the AttendanceRepository type
type AttendanceRepository struct {
	mock.Mock
}

type AttendanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AttendanceRepository) EXPECT() *AttendanceRepository_Expecter {
	return &AttendanceRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *AttendanceRepository) Create(_a0 *models.Attendance) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Attendance) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttendanceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AttendanceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *models.Attendance
func (_e *AttendanceRepository_Expecter) Create(_a0 interface{}) *AttendanceRepository_Create_Call {
	return &AttendanceRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *AttendanceRepository_Create_Call) Run(run func(_a0 *models.Attendance)) *AttendanceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Attendance))
	})
	return _c
}

func (_c *AttendanceRepository_Create_Call) Return(_a0 error) *AttendanceRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttendanceRepository_Create_Call) RunAndReturn(run func(*models.Attendance) error) *AttendanceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: studentID, date
func (_m *AttendanceRepository) Delete(studentID string, date string) (int64, error) {
	ret := _m.Called(studentID, date)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(studentID, date)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(studentID, date)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(studentID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttendanceRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AttendanceRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - studentID string
//   - date string
func (_e *AttendanceRepository_Expecter) Delete(studentID interface{}, date interface{}) *AttendanceRepository_Delete_Call {
	return &AttendanceRepository_Delete_Call{Call: _e.mock.On("Delete", studentID, date)}
}

func (_c *AttendanceRepository_Delete_Call) Run(run func(studentID string, date string)) *AttendanceRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AttendanceRepository_Delete_Call) Return(_a0 int64, _a1 error) *AttendanceRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttendanceRepository_Delete_Call) RunAndReturn(run func(string, string) (int64, error)) *AttendanceRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDate provides a mock function with given fields: date
func (_m *AttendanceRepository) GetByDate(date string) ([]models.Attendance, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetByDate")
	}

	var r0 []models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Attendance, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Attendance); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttendanceRepository_GetByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDate'
type AttendanceRepository_GetByDate_Call struct {
	*mock.Call
}

// GetByDate is a helper method to define mock.On call
//   - date string
func (_e *AttendanceRepository_Expecter) GetByDate(date interface{}) *AttendanceRepository_GetByDate_Call {
	return &AttendanceRepository_GetByDate_Call{Call: _e.mock.On("GetByDate", date)}
}

func (_c *AttendanceRepository_GetByDate_Call) Run(run func(date string)) *AttendanceRepository_GetByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AttendanceRepository_GetByDate_Call) Return(_a0 []models.Attendance, _a1 error) *AttendanceRepository_GetByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttendanceRepository_GetByDate_Call) RunAndReturn(run func(string) ([]models.Attendance, error)) *AttendanceRepository_GetByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStudentIDAndDate provides a mock function with given fields: studentID, date
func (_m *AttendanceRepository) GetByStudentIDAndDate(studentID string, date string) (*models.Attendance, error) {
	ret := _m.Called(studentID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetByStudentIDAndDate")
	}

	var r0 *models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Attendance, error)); ok {
		return rf(studentID, date)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Attendance); ok {
		r0 = rf(studentID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(studentID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttendanceRepository_GetByStudentIDAndDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStudentIDAndDate'
type AttendanceRepository_GetByStudentIDAndDate_Call struct {
	*mock.Call
}

// GetByStudentIDAndDate is a helper method to define mock.On call
//   - studentID string
//   - date string
func (_e *AttendanceRepository_Expecter) GetByStudentIDAndDate(studentID interface{}, date interface{}) *AttendanceRepository_GetByStudentIDAndDate_Call {
	return &AttendanceRepository_GetByStudentIDAndDate_Call{Call: _e.mock.On("GetByStudentIDAndDate", studentID, date)}
}

func (_c *AttendanceRepository_GetByStudentIDAndDate_Call) Run(run func(studentID string, date string)) *AttendanceRepository_GetByStudentIDAndDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AttendanceRepository_GetByStudentIDAndDate_Call) Return(_a0 *models.Attendance, _a1 error) *AttendanceRepository_GetByStudentIDAndDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttendanceRepository_GetByStudentIDAndDate_Call) RunAndReturn(run func(string, string) (*models.Attendance, error)) *AttendanceRepository_GetByStudentIDAndDate_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: studentID, date, attendance
func (_m *AttendanceRepository) Update(studentID string, date string, attendance *models.Attendance) (int64, error) {
	ret := _m.Called(studentID, date, attendance)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *models.Attendance) (int64, error)); ok {
		return rf(studentID, date, attendance)
	}
	if rf, ok := ret.Get(0).(func(string, string, *models.Attendance) int64); ok {
		r0 = rf(studentID, date, attendance)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, *models.Attendance) error); ok {
		r1 = rf(studentID, date, attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttendanceRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AttendanceRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - studentID string
//   - date string
//   - attendance *models.Attendance
func (_e *AttendanceRepository_Expecter) Update(studentID interface{}, date interface{}, attendance interface{}) *AttendanceRepository_Update_Call {
	return &AttendanceRepository_Update_Call{Call: _e.mock.On("Update", studentID, date, attendance)}
}

func (_c *AttendanceRepository_Update_Call) Run(run func(studentID string, date string, attendance *models.Attendance)) *AttendanceRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*models.Attendance))
	})
	return _c
}

func (_c *AttendanceRepository_Update_Call) Return(_a0 int64, _a1 error) *AttendanceRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttendanceRepository_Update_Call) RunAndReturn(run func(string, string, *models.Attendance) (int64, error)) *AttendanceRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAttendanceRepository creates a new instance of AttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceRepository {
	mock := &AttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
